name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  run-tests:
    name: "Run tests"
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]

    steps:
      - name: Git clone
        uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: "npm"

      - name: Npm install
        run: npm ci

      - name: Install Express and Cypress
        run: |
          npm install express
          npm install cypress

      - name: Start Express server for mock test
        run: |
          echo "
          const express = require('express');
          const app = express();
          const port = 3000;

          // Мокування API для одного тесту
          app.get('/api/productsList', (req, res) => {
            res.json({ products: [{ name: 'Mocked Product' }] });
          });

          app.listen(port, () => {
            console.log('Mock server is running at http://localhost:' + port);
          });
          " > server.js

          # Запуск сервера та перевірка логу
          node server.js &

          # Очікування серверу з логуванням
          echo "Waiting for the mock server to start..."
          until curl --silent --head --fail http://localhost:3000; do
            echo "Waiting for server..."
            sleep 1
          done
          echo "Mock server is up!"

      - name: Wait for mock server to be ready
        run: |
          echo "Waiting for the mock server to start..."
          while ! curl --silent --head --fail http://localhost:3000; do
            echo "Waiting for server..."
            sleep 1  
          done
          echo "Mock server is up!"

      - name: Run mock test with Cypress
        run: |
          npx cypress run --config baseUrl=http://localhost:3000 --headless --env allure=true --spec "cypress/integration/mock_test_spec.js"

      - name: Run other Cypress tests
        run: |
          npx cypress run --headless --env allure=true

      - name: Check Allure results
        run: |
          if [ ! -d "./allure-results" ] || [ -z "$(ls -A ./allure-results)" ]; then
            echo "No Allure results found. Skipping report generation."
            exit 1
          fi

      - name: Generate Allure report
        run: |
          allure generate ./allure-results --clean

      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: ./allure-report

      - name: Publish Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results
          path: ./allure-results

      - name: Upload Cypress screenshots (on failure)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: ./cypress/screenshots

      - name: Create gh-pages branch if not exists
        run: |
          if ! git ls-remote --exit-code origin gh-pages; then
            git checkout --orphan gh-pages
            git rm -rf . 
            echo "Placeholder for GitHub Pages" > index.html
            git add index.html
            git commit -m "Initialize gh-pages branch"
            git push origin gh-pages
          fi

      - name: Configure GitHub token for authentication
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git clone --branch gh-pages --single-branch https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} gh-pages
          rm -rf gh-pages/*
          cp -r ./allure-report/* gh-pages/
          cd gh-pages
          git add .
          git commit -m "Update Allure report"
          git push
