name: CI

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  cypress-test:
    name: "Cypress tests"
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18.x]

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: "18.x"

      - name: Install dependencies
        run: npm install

      - name: Install Express and Cypress
        run: |
          npm install express
          npm install cypress

      - name: Install Allure commandline via NPM
        run: npm install -g allure-commandline --save-dev

      - name: Start Express server for mock test
        run: |
          echo "
          import express from 'express';
          const app = express();
          const port = 3000;

          app.use(express.static('cypress'));

          app.get('/api/productsList', (req, res) => {
            res.json({ products: [{ name: 'Mocked Product' }] });
          });

          app.listen(port, () => {
            console.log('Mock server is running at http://localhost:' + port);
          });
          " > server.js

          nohup node server.js &

      - name: Wait for the server to be ready
        run: |
          echo "Waiting for the mock server to start..."
          until curl --silent --head --fail http://localhost:3000/api/productsList; do
            echo "Waiting for server..."
            sleep 1
          done
          echo "Mock server is up!"

      - name: Run Cypress tests in Chrome
        run: npx cypress run --headless --env allure=true --browser chrome
        continue-on-error: true

      #      - name: Run Cypress tests in Firefox
      #        run: npx cypress run --headless --env allure=true --browser firefox
      #        continue-on-error: true

      #      - name: Run Cypress tests in Edge
      #        run: npx cypress run --headless --env allure=true --browser edge
      #        continue-on-error: true

      - name: Run Cypress tests in Electron
        run: npx cypress run --headless --env allure=true --browser electron
        continue-on-error: true

      - name: Save Allure results with timestamp
        run: |
          TIMESTAMP=$(date +%Y-%m-%d_%H-%M-%S)
          mkdir -p ./allure-results/$TIMESTAMP
          if ls ./allure-results/*.xml 1> /dev/null 2>&1; then
            mv ./allure-results/*.xml ./allure-results/$TIMESTAMP/
          fi
          if ls ./allure-results/*.json 1> /dev/null 2>&1; then
            mv ./allure-results/*.json ./allure-results/$TIMESTAMP/
          fi
          if ls ./allure-results/*.txt 1> /dev/null 2>&1; then
            mv ./allure-results/*.txt ./allure-results/$TIMESTAMP/
          fi
          allure generate ./allure-results/$TIMESTAMP --clean

      - name: Upload Allure report
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: ./allure-report

      - name: Publish Allure results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: allure-results
          path: ./allure-results

      - name: Upload Cypress screenshots (on failure)
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: cypress-screenshots
          path: ./cypress/screenshots

      - name: Create gh-pages branch if not exists
        run: |
          if ! git ls-remote --exit-code origin gh-pages; then
            git checkout --orphan gh-pages
            echo "Placeholder for GitHub Pages" > index.html
            git add index.html
            git commit -m "Initialize gh-pages branch"
            git push origin gh-pages
          fi

      - name: Configure GitHub token for authentication
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          git clone --branch gh-pages --single-branch https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }} gh-pages
          cp -r ./allure-report/* gh-pages/
          cd gh-pages
          git add .
          git commit -m "Update Allure report"
          git push
